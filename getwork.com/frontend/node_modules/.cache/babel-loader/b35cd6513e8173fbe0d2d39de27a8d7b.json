{"ast":null,"code":"import { unsafeStringify } from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return unsafeStringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","map":{"version":3,"names":["unsafeStringify","parse","stringToBytes","str","unescape","encodeURIComponent","bytes","i","length","push","charCodeAt","DNS","URL","v35","name","version","hashfunc","generateUUID","value","namespace","buf","offset","_namespace","TypeError","Uint8Array","set","err"],"sources":["C:/webDevelepments/mernApp/MasterProject1/getwork.com/frontend/node_modules/uuid/dist/esm-browser/v35.js"],"sourcesContent":["import { unsafeStringify } from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return unsafeStringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}"],"mappings":"AAAA,SAASA,eAAT,QAAgC,gBAAhC;AACA,OAAOC,KAAP,MAAkB,YAAlB;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;EAC1BA,GAAG,GAAGC,QAAQ,CAACC,kBAAkB,CAACF,GAAD,CAAnB,CAAd,CAD0B,CACe;;EAEzC,MAAMG,KAAK,GAAG,EAAd;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;IACnCD,KAAK,CAACG,IAAN,CAAWN,GAAG,CAACO,UAAJ,CAAeH,CAAf,CAAX;EACD;;EAED,OAAOD,KAAP;AACD;;AAED,OAAO,MAAMK,GAAG,GAAG,sCAAZ;AACP,OAAO,MAAMC,GAAG,GAAG,sCAAZ;AACP,eAAe,SAASC,GAAT,CAAaC,IAAb,EAAmBC,OAAnB,EAA4BC,QAA5B,EAAsC;EACnD,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,SAA7B,EAAwCC,GAAxC,EAA6CC,MAA7C,EAAqD;IACnD,IAAIC,UAAJ;;IAEA,IAAI,OAAOJ,KAAP,KAAiB,QAArB,EAA+B;MAC7BA,KAAK,GAAGhB,aAAa,CAACgB,KAAD,CAArB;IACD;;IAED,IAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmC;MACjCA,SAAS,GAAGlB,KAAK,CAACkB,SAAD,CAAjB;IACD;;IAED,IAAI,CAAC,CAACG,UAAU,GAAGH,SAAd,MAA6B,IAA7B,IAAqCG,UAAU,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,UAAU,CAACd,MAAlF,MAA8F,EAAlG,EAAsG;MACpG,MAAMe,SAAS,CAAC,kEAAD,CAAf;IACD,CAbkD,CAajD;IACF;IACA;;;IAGA,IAAIjB,KAAK,GAAG,IAAIkB,UAAJ,CAAe,KAAKN,KAAK,CAACV,MAA1B,CAAZ;IACAF,KAAK,CAACmB,GAAN,CAAUN,SAAV;IACAb,KAAK,CAACmB,GAAN,CAAUP,KAAV,EAAiBC,SAAS,CAACX,MAA3B;IACAF,KAAK,GAAGU,QAAQ,CAACV,KAAD,CAAhB;IACAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,GAAW,IAAX,GAAkBS,OAA7B;IACAT,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,GAAW,IAAX,GAAkB,IAA7B;;IAEA,IAAIc,GAAJ,EAAS;MACPC,MAAM,GAAGA,MAAM,IAAI,CAAnB;;MAEA,KAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwB,EAAEA,CAA1B,EAA6B;QAC3Ba,GAAG,CAACC,MAAM,GAAGd,CAAV,CAAH,GAAkBD,KAAK,CAACC,CAAD,CAAvB;MACD;;MAED,OAAOa,GAAP;IACD;;IAED,OAAOpB,eAAe,CAACM,KAAD,CAAtB;EACD,CArCkD,CAqCjD;;;EAGF,IAAI;IACFW,YAAY,CAACH,IAAb,GAAoBA,IAApB,CADE,CACwB;EAC3B,CAFD,CAEE,OAAOY,GAAP,EAAY,CAAE,CA1CmC,CA0ClC;;;EAGjBT,YAAY,CAACN,GAAb,GAAmBA,GAAnB;EACAM,YAAY,CAACL,GAAb,GAAmBA,GAAnB;EACA,OAAOK,YAAP;AACD"},"metadata":{},"sourceType":"module"}
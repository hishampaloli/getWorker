{"ast":null,"code":"import { isObject } from '../../shared/utils.js';\nimport $ from '../../shared/dom.js';\nexport default function Thumb(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: true,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: 'swiper-slide-thumb-active',\n      thumbsContainerClass: 'swiper-thumbs'\n    }\n  });\n  let initialized = false;\n  let swiperCreated = false;\n  swiper.thumbs = {\n    swiper: null\n  };\n\n  function onThumbClick() {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const clickedIndex = thumbsSwiper.clickedIndex;\n    const clickedSlide = thumbsSwiper.clickedSlide;\n    if (clickedSlide && $(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;\n    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\n    let slideToIndex;\n\n    if (thumbsSwiper.params.loop) {\n      slideToIndex = parseInt($(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n    } else {\n      slideToIndex = clickedIndex;\n    }\n\n    if (swiper.params.loop) {\n      let currentIndex = swiper.activeIndex;\n\n      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {\n        swiper.loopFix(); // eslint-disable-next-line\n\n        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n        currentIndex = swiper.activeIndex;\n      }\n\n      const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;else slideToIndex = prevIndex;\n    }\n\n    swiper.slideTo(slideToIndex);\n  }\n\n  function init() {\n    const {\n      thumbs: thumbsParams\n    } = swiper.params;\n    if (initialized) return false;\n    initialized = true;\n    const SwiperClass = swiper.constructor;\n\n    if (thumbsParams.swiper instanceof SwiperClass) {\n      swiper.thumbs.swiper = thumbsParams.swiper;\n      Object.assign(swiper.thumbs.swiper.originalParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      Object.assign(swiper.thumbs.swiper.params, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n    } else if (isObject(thumbsParams.swiper)) {\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n      Object.assign(thumbsSwiperParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n      swiperCreated = true;\n    }\n\n    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);\n    swiper.thumbs.swiper.on('tap', onThumbClick);\n    return true;\n  }\n\n  function update(initial) {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView; // Activate thumbs\n\n    let thumbsToActivate = 1;\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n      thumbsToActivate = swiper.params.slidesPerView;\n    }\n\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\n      thumbsToActivate = 1;\n    }\n\n    thumbsToActivate = Math.floor(thumbsToActivate);\n    thumbsSwiper.slides.removeClass(thumbActiveClass);\n\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).addClass(thumbActiveClass);\n      }\n    } else {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);\n      }\n    }\n\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n      let currentThumbsIndex = thumbsSwiper.activeIndex;\n      let newThumbsIndex;\n      let direction;\n\n      if (thumbsSwiper.params.loop) {\n        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {\n          thumbsSwiper.loopFix(); // eslint-disable-next-line\n\n          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;\n          currentThumbsIndex = thumbsSwiper.activeIndex;\n        } // Find actual thumbs index to slide to\n\n\n        const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n        const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n\n        if (typeof prevThumbsIndex === 'undefined') {\n          newThumbsIndex = nextThumbsIndex;\n        } else if (typeof nextThumbsIndex === 'undefined') {\n          newThumbsIndex = prevThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = nextThumbsIndex;\n        } else {\n          newThumbsIndex = prevThumbsIndex;\n        }\n\n        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\n      } else {\n        newThumbsIndex = swiper.realIndex;\n        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\n      }\n\n      if (useOffset) {\n        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\n      }\n\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n        if (thumbsSwiper.params.centeredSlides) {\n          if (newThumbsIndex > currentThumbsIndex) {\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n          } else {\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n          }\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {// newThumbsIndex = newThumbsIndex - slidesPerView + 1;\n        }\n\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n      }\n    }\n  }\n\n  on('beforeInit', () => {\n    const {\n      thumbs\n    } = swiper.params;\n    if (!thumbs || !thumbs.swiper) return;\n    init();\n    update(true);\n  });\n  on('slideChange update resize observerUpdate', () => {\n    update();\n  });\n  on('setTransition', (_s, duration) => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    thumbsSwiper.setTransition(duration);\n  });\n  on('beforeDestroy', () => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n\n    if (swiperCreated) {\n      thumbsSwiper.destroy();\n    }\n  });\n  Object.assign(swiper.thumbs, {\n    init,\n    update\n  });\n}","map":{"version":3,"names":["isObject","$","Thumb","swiper","extendParams","on","thumbs","multipleActiveThumbs","autoScrollOffset","slideThumbActiveClass","thumbsContainerClass","initialized","swiperCreated","onThumbClick","thumbsSwiper","destroyed","clickedIndex","clickedSlide","hasClass","params","slideToIndex","loop","parseInt","attr","currentIndex","activeIndex","slides","eq","slideDuplicateClass","loopFix","_clientLeft","$wrapperEl","clientLeft","prevIndex","prevAll","index","nextIndex","nextAll","slideTo","init","thumbsParams","SwiperClass","constructor","Object","assign","originalParams","watchSlidesProgress","slideToClickedSlide","thumbsSwiperParams","$el","addClass","update","initial","slidesPerView","slidesPerViewDynamic","thumbsToActivate","thumbActiveClass","centeredSlides","Math","floor","removeClass","virtual","enabled","i","children","realIndex","useOffset","currentThumbsIndex","newThumbsIndex","direction","prevThumbsIndex","nextThumbsIndex","slidesPerGroup","previousIndex","visibleSlidesIndexes","indexOf","undefined","_s","duration","setTransition","destroy"],"sources":["C:/webDevelepments/mernApp/MasterProject1/getwork.com/frontend/node_modules/swiper/modules/thumbs/thumbs.js"],"sourcesContent":["import { isObject } from '../../shared/utils.js';\nimport $ from '../../shared/dom.js';\nexport default function Thumb({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: true,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: 'swiper-slide-thumb-active',\n      thumbsContainerClass: 'swiper-thumbs'\n    }\n  });\n  let initialized = false;\n  let swiperCreated = false;\n  swiper.thumbs = {\n    swiper: null\n  };\n\n  function onThumbClick() {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const clickedIndex = thumbsSwiper.clickedIndex;\n    const clickedSlide = thumbsSwiper.clickedSlide;\n    if (clickedSlide && $(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;\n    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\n    let slideToIndex;\n\n    if (thumbsSwiper.params.loop) {\n      slideToIndex = parseInt($(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n    } else {\n      slideToIndex = clickedIndex;\n    }\n\n    if (swiper.params.loop) {\n      let currentIndex = swiper.activeIndex;\n\n      if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {\n        swiper.loopFix(); // eslint-disable-next-line\n\n        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n        currentIndex = swiper.activeIndex;\n      }\n\n      const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index=\"${slideToIndex}\"]`).eq(0).index();\n      if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;else slideToIndex = prevIndex;\n    }\n\n    swiper.slideTo(slideToIndex);\n  }\n\n  function init() {\n    const {\n      thumbs: thumbsParams\n    } = swiper.params;\n    if (initialized) return false;\n    initialized = true;\n    const SwiperClass = swiper.constructor;\n\n    if (thumbsParams.swiper instanceof SwiperClass) {\n      swiper.thumbs.swiper = thumbsParams.swiper;\n      Object.assign(swiper.thumbs.swiper.originalParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      Object.assign(swiper.thumbs.swiper.params, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n    } else if (isObject(thumbsParams.swiper)) {\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n      Object.assign(thumbsSwiperParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n      swiperCreated = true;\n    }\n\n    swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);\n    swiper.thumbs.swiper.on('tap', onThumbClick);\n    return true;\n  }\n\n  function update(initial) {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView; // Activate thumbs\n\n    let thumbsToActivate = 1;\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n      thumbsToActivate = swiper.params.slidesPerView;\n    }\n\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\n      thumbsToActivate = 1;\n    }\n\n    thumbsToActivate = Math.floor(thumbsToActivate);\n    thumbsSwiper.slides.removeClass(thumbActiveClass);\n\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).addClass(thumbActiveClass);\n      }\n    } else {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);\n      }\n    }\n\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n      let currentThumbsIndex = thumbsSwiper.activeIndex;\n      let newThumbsIndex;\n      let direction;\n\n      if (thumbsSwiper.params.loop) {\n        if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {\n          thumbsSwiper.loopFix(); // eslint-disable-next-line\n\n          thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;\n          currentThumbsIndex = thumbsSwiper.activeIndex;\n        } // Find actual thumbs index to slide to\n\n\n        const prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n        const nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(`[data-swiper-slide-index=\"${swiper.realIndex}\"]`).eq(0).index();\n\n        if (typeof prevThumbsIndex === 'undefined') {\n          newThumbsIndex = nextThumbsIndex;\n        } else if (typeof nextThumbsIndex === 'undefined') {\n          newThumbsIndex = prevThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = thumbsSwiper.params.slidesPerGroup > 1 ? nextThumbsIndex : currentThumbsIndex;\n        } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {\n          newThumbsIndex = nextThumbsIndex;\n        } else {\n          newThumbsIndex = prevThumbsIndex;\n        }\n\n        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\n      } else {\n        newThumbsIndex = swiper.realIndex;\n        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\n      }\n\n      if (useOffset) {\n        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\n      }\n\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n        if (thumbsSwiper.params.centeredSlides) {\n          if (newThumbsIndex > currentThumbsIndex) {\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n          } else {\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n          }\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {// newThumbsIndex = newThumbsIndex - slidesPerView + 1;\n        }\n\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n      }\n    }\n  }\n\n  on('beforeInit', () => {\n    const {\n      thumbs\n    } = swiper.params;\n    if (!thumbs || !thumbs.swiper) return;\n    init();\n    update(true);\n  });\n  on('slideChange update resize observerUpdate', () => {\n    update();\n  });\n  on('setTransition', (_s, duration) => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    thumbsSwiper.setTransition(duration);\n  });\n  on('beforeDestroy', () => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n\n    if (swiperCreated) {\n      thumbsSwiper.destroy();\n    }\n  });\n  Object.assign(swiper.thumbs, {\n    init,\n    update\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
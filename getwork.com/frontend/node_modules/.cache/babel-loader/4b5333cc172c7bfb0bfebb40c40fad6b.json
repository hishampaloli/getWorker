{"ast":null,"code":"import { axiosPaymentInstance } from \"../contants/axios\";\nimport { PURCHASE_hISTORY_FAIL, PURCHASE_hISTORY_REQUEST, PURCHASE_hISTORY_SUCCUSS } from \"../contants/paymentConstants\";\nexport const checkout = amount => async dispatch => {\n  console.log(79);\n\n  try {\n    const tokenId = JSON.parse(localStorage.getItem(\"userInfo\"));\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${tokenId.token}`\n      }\n    };\n    const {\n      data: {\n        key\n      }\n    } = await axiosPaymentInstance.get(\"getkey\");\n    const {\n      data\n    } = await axiosPaymentInstance.post(`/checkout`, {\n      amount\n    }, config);\n    console.log(data);\n    const options = {\n      key,\n      // Enter the Key ID generated from the Dashboard\n      amount: data === null || data === void 0 ? void 0 : data.amount,\n      // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\n      currency: \"INR\",\n      name: \"Get worker\",\n      description: \"Buy connects\",\n      image: \"https://example.com/your_logo\",\n      order_id: data === null || data === void 0 ? void 0 : data.id,\n      //This is a sample Order ID. Pass the `id` obtained in the response of Step 1\n      callback_url: `http://localhost:3001/api/credit/paymentVerification?userId=${tokenId._id}&amount=${data === null || data === void 0 ? void 0 : data.amount}`,\n      prefill: {\n        name: tokenId.name,\n        email: tokenId.email,\n        contact: '9447424094'\n      },\n      notes: {\n        address: \"Razorpay Corporate Office\"\n      },\n      theme: {\n        color: \"#3ccf4e\"\n      }\n    };\n    var rzp1 = new window.Razorpay(options);\n    rzp1.open(); // dispatch({\n    //   type: MYJOBS_SUCCES,\n    //   payload: data,\n    // });\n  } catch (error) {\n    console.log(error); // dispatch({\n    //   type: MYJOBS_FAIL,\n    //   error: error,\n    // });\n  }\n};\nexport const myParchaseHistory = amount => async dispatch => {\n  try {\n    dispatch({\n      type: PURCHASE_hISTORY_REQUEST\n    });\n    const tokenId = JSON.parse(localStorage.getItem(\"userInfo\"));\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${tokenId.token}`\n      }\n    };\n    const {\n      data\n    } = await axiosPaymentInstance.get(`/history/${tokenId._id}`, config);\n    dispatch({\n      type: PURCHASE_hISTORY_SUCCUSS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PURCHASE_hISTORY_FAIL,\n      error: error\n    });\n  }\n};","map":{"version":3,"names":["axiosPaymentInstance","PURCHASE_hISTORY_FAIL","PURCHASE_hISTORY_REQUEST","PURCHASE_hISTORY_SUCCUSS","checkout","amount","dispatch","console","log","tokenId","JSON","parse","localStorage","getItem","config","headers","Authorization","token","data","key","get","post","options","currency","name","description","image","order_id","id","callback_url","_id","prefill","email","contact","notes","address","theme","color","rzp1","window","Razorpay","open","error","myParchaseHistory","type","payload"],"sources":["C:/webDevelepments/mernApp/MasterProject1/getwork.com/frontend/src/actions/paymentActions.js"],"sourcesContent":["import { axiosPaymentInstance } from \"../contants/axios\";\r\nimport { PURCHASE_hISTORY_FAIL, PURCHASE_hISTORY_REQUEST, PURCHASE_hISTORY_SUCCUSS } from \"../contants/paymentConstants\";\r\n\r\nexport const checkout = (amount) => async (dispatch) => {\r\n\r\n    console.log(79);\r\n  try {\r\n    const tokenId = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${tokenId.token}`,\r\n      },\r\n    };\r\n\r\n    const {\r\n      data: { key },\r\n    } = await axiosPaymentInstance.get(\"getkey\");\r\n\r\n    const { data } = await axiosPaymentInstance.post(\r\n      `/checkout`,\r\n      { amount },\r\n      config\r\n    );\r\n\r\n    console.log(data);\r\n\r\n\r\n    const options = {\r\n      key, // Enter the Key ID generated from the Dashboard\r\n      amount: data?.amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise\r\n      currency: \"INR\",\r\n      name: \"Get worker\",\r\n      description: \"Buy connects\",\r\n      image: \"https://example.com/your_logo\",\r\n      order_id: data?.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1\r\n      callback_url: `http://localhost:3001/api/credit/paymentVerification?userId=${tokenId._id}&amount=${data?.amount}`,\r\n      prefill: {\r\n        name: tokenId.name,\r\n        email: tokenId.email,\r\n        contact:'9447424094',\r\n      },\r\n      notes: {\r\n        address: \"Razorpay Corporate Office\",\r\n      },\r\n      theme: {\r\n        color: \"#3ccf4e\",\r\n      },\r\n    };\r\n\r\n    var rzp1 = new window.Razorpay(options);\r\n    rzp1.open();\r\n\r\n    // dispatch({\r\n    //   type: MYJOBS_SUCCES,\r\n    //   payload: data,\r\n    // });\r\n  } catch (error) {\r\n    console.log(error);\r\n    // dispatch({\r\n    //   type: MYJOBS_FAIL,\r\n    //   error: error,\r\n    // });\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport const myParchaseHistory = (amount) => async (dispatch) => {\r\n\r\n  try {\r\n\r\n    dispatch({\r\n      type: PURCHASE_hISTORY_REQUEST\r\n    })\r\n\r\n\r\n    const tokenId = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${tokenId.token}`,\r\n      },\r\n    };\r\n\r\n   \r\n    const { data } = await axiosPaymentInstance.get(\r\n      `/history/${tokenId._id}`,\r\n      config\r\n    );\r\n\r\n\r\n    dispatch({\r\n      type: PURCHASE_hISTORY_SUCCUSS,\r\n      payload: data,\r\n    });\r\n\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PURCHASE_hISTORY_FAIL,\r\n      error: error,\r\n    });\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,mBAArC;AACA,SAASC,qBAAT,EAAgCC,wBAAhC,EAA0DC,wBAA1D,QAA0F,8BAA1F;AAEA,OAAO,MAAMC,QAAQ,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;EAEpDC,OAAO,CAACC,GAAR,CAAY,EAAZ;;EACF,IAAI;IACF,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAhB;IAEA,MAAMC,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEPC,aAAa,EAAG,UAASP,OAAO,CAACQ,KAAM;MAFhC;IADI,CAAf;IAOA,MAAM;MACJC,IAAI,EAAE;QAAEC;MAAF;IADF,IAEF,MAAMnB,oBAAoB,CAACoB,GAArB,CAAyB,QAAzB,CAFV;IAIA,MAAM;MAAEF;IAAF,IAAW,MAAMlB,oBAAoB,CAACqB,IAArB,CACpB,WADoB,EAErB;MAAEhB;IAAF,CAFqB,EAGrBS,MAHqB,CAAvB;IAMAP,OAAO,CAACC,GAAR,CAAYU,IAAZ;IAGA,MAAMI,OAAO,GAAG;MACdH,GADc;MACT;MACLd,MAAM,EAAEa,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEb,MAFA;MAEQ;MACtBkB,QAAQ,EAAE,KAHI;MAIdC,IAAI,EAAE,YAJQ;MAKdC,WAAW,EAAE,cALC;MAMdC,KAAK,EAAE,+BANO;MAOdC,QAAQ,EAAET,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEU,EAPF;MAOM;MACpBC,YAAY,EAAG,+DAA8DpB,OAAO,CAACqB,GAAI,WAAUZ,IAArF,aAAqFA,IAArF,uBAAqFA,IAAI,CAAEb,MAAO,EARlG;MASd0B,OAAO,EAAE;QACPP,IAAI,EAAEf,OAAO,CAACe,IADP;QAEPQ,KAAK,EAAEvB,OAAO,CAACuB,KAFR;QAGPC,OAAO,EAAC;MAHD,CATK;MAcdC,KAAK,EAAE;QACLC,OAAO,EAAE;MADJ,CAdO;MAiBdC,KAAK,EAAE;QACLC,KAAK,EAAE;MADF;IAjBO,CAAhB;IAsBA,IAAIC,IAAI,GAAG,IAAIC,MAAM,CAACC,QAAX,CAAoBlB,OAApB,CAAX;IACAgB,IAAI,CAACG,IAAL,GA9CE,CAgDF;IACA;IACA;IACA;EACD,CApDD,CAoDE,OAAOC,KAAP,EAAc;IACdnC,OAAO,CAACC,GAAR,CAAYkC,KAAZ,EADc,CAEd;IACA;IACA;IACA;EACD;AACF,CA9DM;AAoEP,OAAO,MAAMC,iBAAiB,GAAItC,MAAD,IAAY,MAAOC,QAAP,IAAoB;EAE/D,IAAI;IAEFA,QAAQ,CAAC;MACPsC,IAAI,EAAE1C;IADC,CAAD,CAAR;IAKA,MAAMO,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAhB;IAEA,MAAMC,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEPC,aAAa,EAAG,UAASP,OAAO,CAACQ,KAAM;MAFhC;IADI,CAAf;IAQA,MAAM;MAAEC;IAAF,IAAW,MAAMlB,oBAAoB,CAACoB,GAArB,CACpB,YAAWX,OAAO,CAACqB,GAAI,EADH,EAErBhB,MAFqB,CAAvB;IAMAR,QAAQ,CAAC;MACPsC,IAAI,EAAEzC,wBADC;MAEP0C,OAAO,EAAE3B;IAFF,CAAD,CAAR;EAKD,CA5BD,CA4BE,OAAOwB,KAAP,EAAc;IACdpC,QAAQ,CAAC;MACPsC,IAAI,EAAE3C,qBADC;MAEPyC,KAAK,EAAEA;IAFA,CAAD,CAAR;EAID;AACF,CApCM"},"metadata":{},"sourceType":"module"}
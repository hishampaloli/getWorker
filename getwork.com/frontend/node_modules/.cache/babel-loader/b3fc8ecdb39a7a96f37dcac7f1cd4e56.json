{"ast":null,"code":"import axios from \"axios\";\nimport { ADMIN_PROFILE_REQUEST, ADMIN_PROFILE_SUCCESS, ALL_EMPLYEES_FAIL, ALL_EMPLYEES_REQUEST, ALL_EMPLYEES_SUCCESS, ALL_EMPLYERS_FAIL, ALL_EMPLYERS_REQUEST, ALL_EMPLYERS_SUCCESS, BLOCKED_USERS_FAIL, BLOCKED_USERS_REQUEST, BLOCKED_USERS_SUCCESS } from \"../contants/adminConstants\";\nexport const adminProfile = () => async dispatch => {\n  try {\n    dispatch({\n      type: ADMIN_PROFILE_REQUEST\n    });\n    const id = JSON.parse(localStorage.getItem(\"userInfo\"));\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${id.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/admin/allEmployees?keyword=${keyword}`, config);\n    console.log(data);\n    dispatch({\n      type: ADMIN_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: A,\n      error: error\n    });\n  }\n};\nexport const getAllEmplyees = function () {\n  let keyword = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return async dispatch => {\n    try {\n      dispatch({\n        type: ALL_EMPLYEES_REQUEST\n      });\n      const id = JSON.parse(localStorage.getItem(\"userInfo\"));\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${id.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(`/api/admin/allEmployees?keyword=${keyword}`, config);\n      console.log(data);\n      dispatch({\n        type: ALL_EMPLYEES_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: ALL_EMPLYEES_FAIL,\n        error: error\n      });\n    }\n  };\n};\nexport const getAllEmplyers = function () {\n  let keyword = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return async dispatch => {\n    try {\n      dispatch({\n        type: ALL_EMPLYERS_REQUEST\n      });\n      const id = JSON.parse(localStorage.getItem(\"userInfo\"));\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${id.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(`/api/admin/allEmployers?keyword=${keyword}`, config);\n      console.log(data);\n      dispatch({\n        type: ALL_EMPLYERS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: ALL_EMPLYERS_FAIL,\n        error: error\n      });\n    }\n  };\n};\nexport const blockUser = (_id, key, type) => async (dispatch, getState) => {\n  try {\n    const tokenId = JSON.parse(localStorage.getItem(\"userInfo\"));\n    console.log(type);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${tokenId.token}`\n      }\n    };\n    const {\n      datad\n    } = await axios.patch(`http://localhost:3001/api/admin/block/${_id}`, config);\n\n    if (type === \"employee\") {\n      const {\n        data\n      } = await axios.get(`/api/admin/allEmployees?keyword=${key}`, config);\n      dispatch({\n        type: ALL_EMPLYEES_SUCCESS,\n        payload: data\n      });\n    } else if (type === \"other\") {\n      const {\n        data\n      } = await axios.get(`http://localhost:3001/api/admin//blockedUsers`, config);\n      dispatch({\n        type: BLOCKED_USERS_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await axios.get(`/api/admin/allEmployers?keyword=${key}`, config);\n      dispatch({\n        type: ALL_EMPLYERS_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ALL_EMPLYEES_FAIL,\n      error: error\n    });\n  }\n};\nexport const allblockedUsers = (_id, key, type) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOCKED_USERS_REQUEST\n    });\n    const tokenId = JSON.parse(localStorage.getItem(\"userInfo\"));\n    console.log(type);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${tokenId.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`http://localhost:3001/api/admin//blockedUsers`, config);\n    console.log(data); // const { data } = await axios.get(\n    //   `/api/admin/allEmployees?keyword=${key}`,\n    //   config\n    // );\n\n    dispatch({\n      type: BLOCKED_USERS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOCKED_USERS_FAIL,\n      error: error\n    });\n  }\n};\nexport const blacklistUsers = _id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOCKED_USERS_REQUEST\n    });\n    const tokenId = JSON.parse(localStorage.getItem(\"userInfo\"));\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${tokenId.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`http://localhost:3001/api/admin/blacklist`, config);\n  } catch (error) {\n    dispatch({\n      type: BLOCKED_USERS_FAIL,\n      error: error\n    });\n  }\n};","map":{"version":3,"names":["axios","ADMIN_PROFILE_REQUEST","ADMIN_PROFILE_SUCCESS","ALL_EMPLYEES_FAIL","ALL_EMPLYEES_REQUEST","ALL_EMPLYEES_SUCCESS","ALL_EMPLYERS_FAIL","ALL_EMPLYERS_REQUEST","ALL_EMPLYERS_SUCCESS","BLOCKED_USERS_FAIL","BLOCKED_USERS_REQUEST","BLOCKED_USERS_SUCCESS","adminProfile","dispatch","type","id","JSON","parse","localStorage","getItem","config","headers","Authorization","token","data","get","keyword","console","log","payload","error","A","getAllEmplyees","getAllEmplyers","blockUser","_id","key","getState","tokenId","datad","patch","allblockedUsers","blacklistUsers","put"],"sources":["C:/webDevelepments/mernApp/MasterProject1/getwork.com/frontend/src/actions/adminActions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  ADMIN_PROFILE_REQUEST,\r\n  ADMIN_PROFILE_SUCCESS,\r\n  ALL_EMPLYEES_FAIL,\r\n  ALL_EMPLYEES_REQUEST,\r\n  ALL_EMPLYEES_SUCCESS,\r\n  ALL_EMPLYERS_FAIL,\r\n  ALL_EMPLYERS_REQUEST,\r\n  ALL_EMPLYERS_SUCCESS,\r\n  BLOCKED_USERS_FAIL,\r\n  BLOCKED_USERS_REQUEST,\r\n  BLOCKED_USERS_SUCCESS,\r\n} from \"../contants/adminConstants\";\r\n\r\nexport const adminProfile = () => async (dispatch) => {\r\n\r\n  try {\r\n    dispatch({\r\n      type: ADMIN_PROFILE_REQUEST,\r\n    });\r\n\r\n    const id = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${id.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(\r\n      `/api/admin/allEmployees?keyword=${keyword}`,\r\n      config\r\n    );\r\n\r\n    console.log(data);\r\n\r\n    dispatch({\r\n      type: ADMIN_PROFILE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: A,\r\n      error: error,\r\n    });\r\n  }\r\n}\r\n\r\nexport const getAllEmplyees =\r\n  (keyword = \"\") =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: ALL_EMPLYEES_REQUEST,\r\n      });\r\n\r\n      const id = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${id.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\r\n        `/api/admin/allEmployees?keyword=${keyword}`,\r\n        config\r\n      );\r\n\r\n      console.log(data);\r\n\r\n      dispatch({\r\n        type: ALL_EMPLYEES_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: ALL_EMPLYEES_FAIL,\r\n        error: error,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const getAllEmplyers =\r\n  (keyword = \"\") =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: ALL_EMPLYERS_REQUEST,\r\n      });\r\n\r\n      const id = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${id.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\r\n        `/api/admin/allEmployers?keyword=${keyword}`,\r\n        config\r\n      );\r\n\r\n      console.log(data);\r\n\r\n      dispatch({\r\n        type: ALL_EMPLYERS_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: ALL_EMPLYERS_FAIL,\r\n        error: error,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const blockUser = (_id, key, type) => async (dispatch, getState) => {\r\n  try {\r\n    const tokenId = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    console.log(type);\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${tokenId.token}`,\r\n      },\r\n    };\r\n\r\n    const { datad } = await axios.patch(\r\n      `http://localhost:3001/api/admin/block/${_id}`,\r\n      config\r\n    );\r\n\r\n    if (type === \"employee\") {\r\n      const { data } = await axios.get(\r\n        `/api/admin/allEmployees?keyword=${key}`,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: ALL_EMPLYEES_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } else if (type === \"other\") {\r\n      const { data } = await axios.get(\r\n        `http://localhost:3001/api/admin//blockedUsers`,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: BLOCKED_USERS_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } else {\r\n      const { data } = await axios.get(\r\n        `/api/admin/allEmployers?keyword=${key}`,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: ALL_EMPLYERS_SUCCESS,\r\n        payload: data,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ALL_EMPLYEES_FAIL,\r\n      error: error,\r\n    });\r\n  }\r\n};\r\n\r\nexport const allblockedUsers =\r\n  (_id, key, type) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: BLOCKED_USERS_REQUEST,\r\n      });\r\n\r\n      const tokenId = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n      console.log(type);\r\n\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${tokenId.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\r\n        `http://localhost:3001/api/admin//blockedUsers`,\r\n        config\r\n      );\r\n\r\n      console.log(data);\r\n      // const { data } = await axios.get(\r\n      //   `/api/admin/allEmployees?keyword=${key}`,\r\n      //   config\r\n      // );\r\n\r\n      dispatch({\r\n        type: BLOCKED_USERS_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: BLOCKED_USERS_FAIL,\r\n        error: error,\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  \r\nexport const blacklistUsers =\r\n(_id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: BLOCKED_USERS_REQUEST,\r\n    });\r\n\r\n    const tokenId = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${tokenId.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.put(\r\n      `http://localhost:3001/api/admin/blacklist`,\r\n      config\r\n    );\r\n\r\n\r\n\r\n   \r\n  } catch (error) {\r\n    dispatch({\r\n      type: BLOCKED_USERS_FAIL,\r\n      error: error,\r\n    });\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
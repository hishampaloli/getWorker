{"ast":null,"code":"import createShadow from '../../shared/create-shadow.js';\nimport effectInit from '../../shared/effect-init.js';\nimport effectTarget from '../../shared/effect-target.js';\nimport effectVirtualTransitionEnd from '../../shared/effect-virtual-transition-end.js';\nexport default function EffectCards(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    cardsEffect: {\n      slideShadows: true,\n      transformEl: null,\n      rotate: true,\n      perSlideRotate: 2,\n      perSlideOffset: 8\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      slides,\n      activeIndex\n    } = swiper;\n    const params = swiper.params.cardsEffect;\n    const {\n      startTranslate,\n      isTouched\n    } = swiper.touchEventsData;\n    const currentTranslate = swiper.translate;\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideProgress = $slideEl[0].progress;\n      const progress = Math.min(Math.max(slideProgress, -4), 4);\n      let offset = $slideEl[0].swiperSlideOffset;\n\n      if (swiper.params.centeredSlides && !swiper.params.cssMode) {\n        swiper.$wrapperEl.transform(`translateX(${swiper.minTranslate()}px)`);\n      }\n\n      if (swiper.params.centeredSlides && swiper.params.cssMode) {\n        offset -= slides[0].swiperSlideOffset;\n      }\n\n      let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let tY = 0;\n      const tZ = -100 * Math.abs(progress);\n      let scale = 1;\n      let rotate = -params.perSlideRotate * progress;\n      let tXAdd = params.perSlideOffset - Math.abs(progress) * 0.75;\n      const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;\n      const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\n      const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\n\n      if (isSwipeToNext || isSwipeToPrev) {\n        const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\n        rotate += -28 * progress * subProgress;\n        scale += -0.5 * subProgress;\n        tXAdd += 96 * subProgress;\n        tY = `${-25 * subProgress * Math.abs(progress)}%`;\n      }\n\n      if (progress < 0) {\n        // next\n        tX = `calc(${tX}px + (${tXAdd * Math.abs(progress)}%))`;\n      } else if (progress > 0) {\n        // prev\n        tX = `calc(${tX}px + (-${tXAdd * Math.abs(progress)}%))`;\n      } else {\n        tX = `${tX}px`;\n      }\n\n      if (!swiper.isHorizontal()) {\n        const prevY = tY;\n        tY = tX;\n        tX = prevY;\n      }\n\n      const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;\n      const transform = `\n        translate3d(${tX}, ${tY}, ${tZ}px)\n        rotateZ(${params.rotate ? rotate : 0}deg)\n        scale(${scaleString})\n      `;\n\n      if (params.slideShadows) {\n        // Set shadows\n        let $shadowEl = $slideEl.find('.swiper-slide-shadow');\n\n        if ($shadowEl.length === 0) {\n          $shadowEl = createShadow(params, $slideEl);\n        }\n\n        if ($shadowEl.length) $shadowEl[0].style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\n      }\n\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform);\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.cardsEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow').transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl\n    });\n  };\n\n  effectInit({\n    effect: 'cards',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}","map":{"version":3,"names":["createShadow","effectInit","effectTarget","effectVirtualTransitionEnd","EffectCards","swiper","extendParams","on","cardsEffect","slideShadows","transformEl","rotate","perSlideRotate","perSlideOffset","setTranslate","slides","activeIndex","params","startTranslate","isTouched","touchEventsData","currentTranslate","translate","i","length","$slideEl","eq","slideProgress","progress","Math","min","max","offset","swiperSlideOffset","centeredSlides","cssMode","$wrapperEl","transform","minTranslate","tX","tY","tZ","abs","scale","tXAdd","slideIndex","virtual","enabled","from","isSwipeToNext","isSwipeToPrev","subProgress","isHorizontal","prevY","scaleString","$shadowEl","find","style","opacity","zIndex","round","$targetEl","setTransition","duration","$transitionElements","transition","effect","perspective","overwriteParams","watchSlidesProgress","virtualTranslate"],"sources":["C:/webDevelepments/mernApp/MasterProject1/getwork.com/frontend/node_modules/swiper/modules/effect-cards/effect-cards.js"],"sourcesContent":["import createShadow from '../../shared/create-shadow.js';\nimport effectInit from '../../shared/effect-init.js';\nimport effectTarget from '../../shared/effect-target.js';\nimport effectVirtualTransitionEnd from '../../shared/effect-virtual-transition-end.js';\nexport default function EffectCards({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    cardsEffect: {\n      slideShadows: true,\n      transformEl: null,\n      rotate: true,\n      perSlideRotate: 2,\n      perSlideOffset: 8\n    }\n  });\n\n  const setTranslate = () => {\n    const {\n      slides,\n      activeIndex\n    } = swiper;\n    const params = swiper.params.cardsEffect;\n    const {\n      startTranslate,\n      isTouched\n    } = swiper.touchEventsData;\n    const currentTranslate = swiper.translate;\n\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = slides.eq(i);\n      const slideProgress = $slideEl[0].progress;\n      const progress = Math.min(Math.max(slideProgress, -4), 4);\n      let offset = $slideEl[0].swiperSlideOffset;\n\n      if (swiper.params.centeredSlides && !swiper.params.cssMode) {\n        swiper.$wrapperEl.transform(`translateX(${swiper.minTranslate()}px)`);\n      }\n\n      if (swiper.params.centeredSlides && swiper.params.cssMode) {\n        offset -= slides[0].swiperSlideOffset;\n      }\n\n      let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let tY = 0;\n      const tZ = -100 * Math.abs(progress);\n      let scale = 1;\n      let rotate = -params.perSlideRotate * progress;\n      let tXAdd = params.perSlideOffset - Math.abs(progress) * 0.75;\n      const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;\n      const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\n      const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\n\n      if (isSwipeToNext || isSwipeToPrev) {\n        const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\n        rotate += -28 * progress * subProgress;\n        scale += -0.5 * subProgress;\n        tXAdd += 96 * subProgress;\n        tY = `${-25 * subProgress * Math.abs(progress)}%`;\n      }\n\n      if (progress < 0) {\n        // next\n        tX = `calc(${tX}px + (${tXAdd * Math.abs(progress)}%))`;\n      } else if (progress > 0) {\n        // prev\n        tX = `calc(${tX}px + (-${tXAdd * Math.abs(progress)}%))`;\n      } else {\n        tX = `${tX}px`;\n      }\n\n      if (!swiper.isHorizontal()) {\n        const prevY = tY;\n        tY = tX;\n        tX = prevY;\n      }\n\n      const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;\n      const transform = `\n        translate3d(${tX}, ${tY}, ${tZ}px)\n        rotateZ(${params.rotate ? rotate : 0}deg)\n        scale(${scaleString})\n      `;\n\n      if (params.slideShadows) {\n        // Set shadows\n        let $shadowEl = $slideEl.find('.swiper-slide-shadow');\n\n        if ($shadowEl.length === 0) {\n          $shadowEl = createShadow(params, $slideEl);\n        }\n\n        if ($shadowEl.length) $shadowEl[0].style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\n      }\n\n      $slideEl[0].style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.transform(transform);\n    }\n  };\n\n  const setTransition = duration => {\n    const {\n      transformEl\n    } = swiper.params.cardsEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration).find('.swiper-slide-shadow').transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl\n    });\n  };\n\n  effectInit({\n    effect: 'cards',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,+BAAzB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,0BAAP,MAAuC,+CAAvC;AACA,eAAe,SAASC,WAAT,OAIZ;EAAA,IAJiC;IAClCC,MADkC;IAElCC,YAFkC;IAGlCC;EAHkC,CAIjC;EACDD,YAAY,CAAC;IACXE,WAAW,EAAE;MACXC,YAAY,EAAE,IADH;MAEXC,WAAW,EAAE,IAFF;MAGXC,MAAM,EAAE,IAHG;MAIXC,cAAc,EAAE,CAJL;MAKXC,cAAc,EAAE;IALL;EADF,CAAD,CAAZ;;EAUA,MAAMC,YAAY,GAAG,MAAM;IACzB,MAAM;MACJC,MADI;MAEJC;IAFI,IAGFX,MAHJ;IAIA,MAAMY,MAAM,GAAGZ,MAAM,CAACY,MAAP,CAAcT,WAA7B;IACA,MAAM;MACJU,cADI;MAEJC;IAFI,IAGFd,MAAM,CAACe,eAHX;IAIA,MAAMC,gBAAgB,GAAGhB,MAAM,CAACiB,SAAhC;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAAM,CAACS,MAA3B,EAAmCD,CAAC,IAAI,CAAxC,EAA2C;MACzC,MAAME,QAAQ,GAAGV,MAAM,CAACW,EAAP,CAAUH,CAAV,CAAjB;MACA,MAAMI,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAAR,CAAYG,QAAlC;MACA,MAAMA,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASJ,aAAT,EAAwB,CAAC,CAAzB,CAAT,EAAsC,CAAtC,CAAjB;MACA,IAAIK,MAAM,GAAGP,QAAQ,CAAC,CAAD,CAAR,CAAYQ,iBAAzB;;MAEA,IAAI5B,MAAM,CAACY,MAAP,CAAciB,cAAd,IAAgC,CAAC7B,MAAM,CAACY,MAAP,CAAckB,OAAnD,EAA4D;QAC1D9B,MAAM,CAAC+B,UAAP,CAAkBC,SAAlB,CAA6B,cAAahC,MAAM,CAACiC,YAAP,EAAsB,KAAhE;MACD;;MAED,IAAIjC,MAAM,CAACY,MAAP,CAAciB,cAAd,IAAgC7B,MAAM,CAACY,MAAP,CAAckB,OAAlD,EAA2D;QACzDH,MAAM,IAAIjB,MAAM,CAAC,CAAD,CAAN,CAAUkB,iBAApB;MACD;;MAED,IAAIM,EAAE,GAAGlC,MAAM,CAACY,MAAP,CAAckB,OAAd,GAAwB,CAACH,MAAD,GAAU3B,MAAM,CAACiB,SAAzC,GAAqD,CAACU,MAA/D;MACA,IAAIQ,EAAE,GAAG,CAAT;MACA,MAAMC,EAAE,GAAG,CAAC,GAAD,GAAOZ,IAAI,CAACa,GAAL,CAASd,QAAT,CAAlB;MACA,IAAIe,KAAK,GAAG,CAAZ;MACA,IAAIhC,MAAM,GAAG,CAACM,MAAM,CAACL,cAAR,GAAyBgB,QAAtC;MACA,IAAIgB,KAAK,GAAG3B,MAAM,CAACJ,cAAP,GAAwBgB,IAAI,CAACa,GAAL,CAASd,QAAT,IAAqB,IAAzD;MACA,MAAMiB,UAAU,GAAGxC,MAAM,CAACyC,OAAP,IAAkBzC,MAAM,CAACY,MAAP,CAAc6B,OAAd,CAAsBC,OAAxC,GAAkD1C,MAAM,CAACyC,OAAP,CAAeE,IAAf,GAAsBzB,CAAxE,GAA4EA,CAA/F;MACA,MAAM0B,aAAa,GAAG,CAACJ,UAAU,KAAK7B,WAAf,IAA8B6B,UAAU,KAAK7B,WAAW,GAAG,CAA5D,KAAkEY,QAAQ,GAAG,CAA7E,IAAkFA,QAAQ,GAAG,CAA7F,KAAmGT,SAAS,IAAId,MAAM,CAACY,MAAP,CAAckB,OAA9H,KAA0Id,gBAAgB,GAAGH,cAAnL;MACA,MAAMgC,aAAa,GAAG,CAACL,UAAU,KAAK7B,WAAf,IAA8B6B,UAAU,KAAK7B,WAAW,GAAG,CAA5D,KAAkEY,QAAQ,GAAG,CAA7E,IAAkFA,QAAQ,GAAG,CAAC,CAA9F,KAAoGT,SAAS,IAAId,MAAM,CAACY,MAAP,CAAckB,OAA/H,KAA2Id,gBAAgB,GAAGH,cAApL;;MAEA,IAAI+B,aAAa,IAAIC,aAArB,EAAoC;QAClC,MAAMC,WAAW,GAAG,CAAC,IAAItB,IAAI,CAACa,GAAL,CAAS,CAACb,IAAI,CAACa,GAAL,CAASd,QAAT,IAAqB,GAAtB,IAA6B,GAAtC,CAAL,KAAoD,GAAxE;QACAjB,MAAM,IAAI,CAAC,EAAD,GAAMiB,QAAN,GAAiBuB,WAA3B;QACAR,KAAK,IAAI,CAAC,GAAD,GAAOQ,WAAhB;QACAP,KAAK,IAAI,KAAKO,WAAd;QACAX,EAAE,GAAI,GAAE,CAAC,EAAD,GAAMW,WAAN,GAAoBtB,IAAI,CAACa,GAAL,CAASd,QAAT,CAAmB,GAA/C;MACD;;MAED,IAAIA,QAAQ,GAAG,CAAf,EAAkB;QAChB;QACAW,EAAE,GAAI,QAAOA,EAAG,SAAQK,KAAK,GAAGf,IAAI,CAACa,GAAL,CAASd,QAAT,CAAmB,KAAnD;MACD,CAHD,MAGO,IAAIA,QAAQ,GAAG,CAAf,EAAkB;QACvB;QACAW,EAAE,GAAI,QAAOA,EAAG,UAASK,KAAK,GAAGf,IAAI,CAACa,GAAL,CAASd,QAAT,CAAmB,KAApD;MACD,CAHM,MAGA;QACLW,EAAE,GAAI,GAAEA,EAAG,IAAX;MACD;;MAED,IAAI,CAAClC,MAAM,CAAC+C,YAAP,EAAL,EAA4B;QAC1B,MAAMC,KAAK,GAAGb,EAAd;QACAA,EAAE,GAAGD,EAAL;QACAA,EAAE,GAAGc,KAAL;MACD;;MAED,MAAMC,WAAW,GAAG1B,QAAQ,GAAG,CAAX,GAAgB,GAAE,IAAI,CAAC,IAAIe,KAAL,IAAcf,QAAS,EAA7C,GAAkD,GAAE,IAAI,CAAC,IAAIe,KAAL,IAAcf,QAAS,EAAnG;MACA,MAAMS,SAAS,GAAI;AACzB,sBAAsBE,EAAG,KAAIC,EAAG,KAAIC,EAAG;AACvC,kBAAkBxB,MAAM,CAACN,MAAP,GAAgBA,MAAhB,GAAyB,CAAE;AAC7C,gBAAgB2C,WAAY;AAC5B,OAJM;;MAMA,IAAIrC,MAAM,CAACR,YAAX,EAAyB;QACvB;QACA,IAAI8C,SAAS,GAAG9B,QAAQ,CAAC+B,IAAT,CAAc,sBAAd,CAAhB;;QAEA,IAAID,SAAS,CAAC/B,MAAV,KAAqB,CAAzB,EAA4B;UAC1B+B,SAAS,GAAGvD,YAAY,CAACiB,MAAD,EAASQ,QAAT,CAAxB;QACD;;QAED,IAAI8B,SAAS,CAAC/B,MAAd,EAAsB+B,SAAS,CAAC,CAAD,CAAT,CAAaE,KAAb,CAAmBC,OAAnB,GAA6B7B,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,CAACF,IAAI,CAACa,GAAL,CAASd,QAAT,IAAqB,GAAtB,IAA6B,GAAtC,EAA2C,CAA3C,CAAT,EAAwD,CAAxD,CAA7B;MACvB;;MAEDH,QAAQ,CAAC,CAAD,CAAR,CAAYgC,KAAZ,CAAkBE,MAAlB,GAA2B,CAAC9B,IAAI,CAACa,GAAL,CAASb,IAAI,CAAC+B,KAAL,CAAWjC,aAAX,CAAT,CAAD,GAAuCZ,MAAM,CAACS,MAAzE;MACA,MAAMqC,SAAS,GAAG3D,YAAY,CAACe,MAAD,EAASQ,QAAT,CAA9B;MACAoC,SAAS,CAACxB,SAAV,CAAoBA,SAApB;IACD;EACF,CAlFD;;EAoFA,MAAMyB,aAAa,GAAGC,QAAQ,IAAI;IAChC,MAAM;MACJrD;IADI,IAEFL,MAAM,CAACY,MAAP,CAAcT,WAFlB;IAGA,MAAMwD,mBAAmB,GAAGtD,WAAW,GAAGL,MAAM,CAACU,MAAP,CAAcyC,IAAd,CAAmB9C,WAAnB,CAAH,GAAqCL,MAAM,CAACU,MAAnF;IACAiD,mBAAmB,CAACC,UAApB,CAA+BF,QAA/B,EAAyCP,IAAzC,CAA8C,sBAA9C,EAAsES,UAAtE,CAAiFF,QAAjF;IACA5D,0BAA0B,CAAC;MACzBE,MADyB;MAEzB0D,QAFyB;MAGzBrD;IAHyB,CAAD,CAA1B;EAKD,CAXD;;EAaAT,UAAU,CAAC;IACTiE,MAAM,EAAE,OADC;IAET7D,MAFS;IAGTE,EAHS;IAITO,YAJS;IAKTgD,aALS;IAMTK,WAAW,EAAE,MAAM,IANV;IAOTC,eAAe,EAAE,OAAO;MACtBC,mBAAmB,EAAE,IADC;MAEtBC,gBAAgB,EAAE,CAACjE,MAAM,CAACY,MAAP,CAAckB;IAFX,CAAP;EAPR,CAAD,CAAV;AAYD"},"metadata":{},"sourceType":"module"}
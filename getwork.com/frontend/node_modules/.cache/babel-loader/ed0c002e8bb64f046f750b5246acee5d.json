{"ast":null,"code":"import { setCSSProperty } from '../../shared/utils.js';\nexport default function updateSlides() {\n  const swiper = this;\n\n  function getDirectionLabel(property) {\n    if (swiper.isHorizontal()) {\n      return property;\n    } // prettier-ignore\n\n\n    return {\n      'width': 'height',\n      'margin-top': 'margin-left',\n      'margin-bottom ': 'margin-right',\n      'margin-left': 'margin-top',\n      'margin-right': 'margin-bottom',\n      'padding-left': 'padding-top',\n      'padding-right': 'padding-bottom',\n      'marginRight': 'marginBottom'\n    }[property];\n  }\n\n  function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n  }\n\n  const params = swiper.params;\n  const {\n    $wrapperEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n  let offsetBefore = params.slidesOffsetBefore;\n\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n\n  let offsetAfter = params.slidesOffsetAfter;\n\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.slidesGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index = 0;\n\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n  }\n\n  swiper.virtualSize = -spaceBetween; // reset margins\n\n  if (rtl) slides.css({\n    marginLeft: '',\n    marginBottom: '',\n    marginTop: ''\n  });else slides.css({\n    marginRight: '',\n    marginBottom: '',\n    marginTop: ''\n  }); // reset cssMode offsets\n\n  if (params.centeredSlides && params.cssMode) {\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', '');\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', '');\n  }\n\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n\n  if (gridEnabled) {\n    swiper.grid.initSlides(slidesLength);\n  } // Calc slides\n\n\n  let slideSize;\n  const shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(key => {\n    return typeof params.breakpoints[key].slidesPerView !== 'undefined';\n  }).length > 0;\n\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide = slides.eq(i);\n\n    if (gridEnabled) {\n      swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);\n    }\n\n    if (slide.css('display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      if (shouldResetSlideSize) {\n        slides[i].style[getDirectionLabel('width')] = ``;\n      }\n\n      const slideStyles = getComputedStyle(slide[0]);\n      const currentTransform = slide[0].style.transform;\n      const currentWebKitTransform = slide[0].style.webkitTransform;\n\n      if (currentTransform) {\n        slide[0].style.transform = 'none';\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = 'none';\n      }\n\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n      } else {\n        // eslint-disable-next-line\n        const width = getDirectionPropertyValue(slideStyles, 'width');\n        const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\n        const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\n        const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\n        const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\n        const boxSizing = slideStyles.getPropertyValue('box-sizing');\n\n        if (boxSizing && boxSizing === 'border-box') {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          const {\n            clientWidth,\n            offsetWidth\n          } = slide[0];\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n\n      if (slides[i]) {\n        slides[i].style[getDirectionLabel('width')] = `${slideSize}px`;\n      }\n    }\n\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n\n    slidesSizesGrid.push(slideSize);\n\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index += 1;\n  }\n\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n\n  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (params.setWrapperSize) {\n    $wrapperEl.css({\n      [getDirectionLabel('width')]: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (gridEnabled) {\n    swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);\n  } // Remove last grid elements depending on width\n\n\n  if (!params.centeredSlides) {\n    const newSlidesGrid = [];\n\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n\n    snapGrid = newSlidesGrid;\n\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n\n  if (snapGrid.length === 0) snapGrid = [0];\n\n  if (params.spaceBetween !== 0) {\n    const key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');\n    slides.filter((_, slideIndex) => {\n      if (!params.cssMode) return true;\n\n      if (slideIndex === slides.length - 1) {\n        return false;\n      }\n\n      return true;\n    }).css({\n      [key]: `${spaceBetween}px`\n    });\n  }\n\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map(snap => {\n      if (snap < 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n\n  Object.assign(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n    const addToSnapGrid = -swiper.snapGrid[0];\n    const addToSlidesGrid = -swiper.slidesGrid[0];\n    swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);\n    swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);\n  }\n\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n\n  if (!isVirtual && !params.cssMode && (params.effect === 'slide' || params.effect === 'fade')) {\n    const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\n    const hasClassBackfaceClassAdded = swiper.$el.hasClass(backFaceHiddenClass);\n\n    if (slidesLength <= params.maxBackfaceHiddenSlides) {\n      if (!hasClassBackfaceClassAdded) swiper.$el.addClass(backFaceHiddenClass);\n    } else if (hasClassBackfaceClassAdded) {\n      swiper.$el.removeClass(backFaceHiddenClass);\n    }\n  }\n}","map":{"version":3,"names":["setCSSProperty","updateSlides","swiper","getDirectionLabel","property","isHorizontal","getDirectionPropertyValue","node","label","parseFloat","getPropertyValue","params","$wrapperEl","size","swiperSize","rtlTranslate","rtl","wrongRTL","isVirtual","virtual","enabled","previousSlidesLength","slides","length","children","slideClass","slidesLength","snapGrid","slidesGrid","slidesSizesGrid","offsetBefore","slidesOffsetBefore","call","offsetAfter","slidesOffsetAfter","previousSnapGridLength","previousSlidesGridLength","spaceBetween","slidePosition","prevSlideSize","index","indexOf","replace","virtualSize","css","marginLeft","marginBottom","marginTop","marginRight","centeredSlides","cssMode","wrapperEl","gridEnabled","grid","rows","initSlides","slideSize","shouldResetSlideSize","slidesPerView","breakpoints","Object","keys","filter","key","i","slide","eq","updateSlide","style","slideStyles","getComputedStyle","currentTransform","transform","currentWebKitTransform","webkitTransform","roundLengths","outerWidth","outerHeight","width","paddingLeft","paddingRight","boxSizing","clientWidth","offsetWidth","Math","floor","swiperSlideSize","push","abs","slidesPerGroup","min","slidesPerGroupSkip","max","effect","setWrapperSize","updateWrapperSize","newSlidesGrid","slidesGridItem","_","slideIndex","centeredSlidesBounds","allSlidesSize","forEach","slideSizeValue","maxSnap","map","snap","centerInsufficientSlides","allSlidesOffset","snapIndex","assign","addToSnapGrid","addToSlidesGrid","v","emit","watchOverflow","checkOverflow","watchSlidesProgress","updateSlidesOffset","backFaceHiddenClass","containerModifierClass","hasClassBackfaceClassAdded","$el","hasClass","maxBackfaceHiddenSlides","addClass","removeClass"],"sources":["C:/webDevelepments/mernApp/MasterProject1/getwork.com/frontend/node_modules/swiper/core/update/updateSlides.js"],"sourcesContent":["import { setCSSProperty } from '../../shared/utils.js';\nexport default function updateSlides() {\n  const swiper = this;\n\n  function getDirectionLabel(property) {\n    if (swiper.isHorizontal()) {\n      return property;\n    } // prettier-ignore\n\n\n    return {\n      'width': 'height',\n      'margin-top': 'margin-left',\n      'margin-bottom ': 'margin-right',\n      'margin-left': 'margin-top',\n      'margin-right': 'margin-bottom',\n      'padding-left': 'padding-top',\n      'padding-right': 'padding-bottom',\n      'marginRight': 'marginBottom'\n    }[property];\n  }\n\n  function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n  }\n\n  const params = swiper.params;\n  const {\n    $wrapperEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n  let offsetBefore = params.slidesOffsetBefore;\n\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n\n  let offsetAfter = params.slidesOffsetAfter;\n\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.slidesGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index = 0;\n\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n  }\n\n  swiper.virtualSize = -spaceBetween; // reset margins\n\n  if (rtl) slides.css({\n    marginLeft: '',\n    marginBottom: '',\n    marginTop: ''\n  });else slides.css({\n    marginRight: '',\n    marginBottom: '',\n    marginTop: ''\n  }); // reset cssMode offsets\n\n  if (params.centeredSlides && params.cssMode) {\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', '');\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', '');\n  }\n\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n\n  if (gridEnabled) {\n    swiper.grid.initSlides(slidesLength);\n  } // Calc slides\n\n\n  let slideSize;\n  const shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(key => {\n    return typeof params.breakpoints[key].slidesPerView !== 'undefined';\n  }).length > 0;\n\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide = slides.eq(i);\n\n    if (gridEnabled) {\n      swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);\n    }\n\n    if (slide.css('display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      if (shouldResetSlideSize) {\n        slides[i].style[getDirectionLabel('width')] = ``;\n      }\n\n      const slideStyles = getComputedStyle(slide[0]);\n      const currentTransform = slide[0].style.transform;\n      const currentWebKitTransform = slide[0].style.webkitTransform;\n\n      if (currentTransform) {\n        slide[0].style.transform = 'none';\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = 'none';\n      }\n\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n      } else {\n        // eslint-disable-next-line\n        const width = getDirectionPropertyValue(slideStyles, 'width');\n        const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\n        const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\n        const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\n        const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\n        const boxSizing = slideStyles.getPropertyValue('box-sizing');\n\n        if (boxSizing && boxSizing === 'border-box') {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          const {\n            clientWidth,\n            offsetWidth\n          } = slide[0];\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n\n      if (slides[i]) {\n        slides[i].style[getDirectionLabel('width')] = `${slideSize}px`;\n      }\n    }\n\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n\n    slidesSizesGrid.push(slideSize);\n\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index += 1;\n  }\n\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n\n  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (params.setWrapperSize) {\n    $wrapperEl.css({\n      [getDirectionLabel('width')]: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n\n  if (gridEnabled) {\n    swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);\n  } // Remove last grid elements depending on width\n\n\n  if (!params.centeredSlides) {\n    const newSlidesGrid = [];\n\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n\n    snapGrid = newSlidesGrid;\n\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n\n  if (snapGrid.length === 0) snapGrid = [0];\n\n  if (params.spaceBetween !== 0) {\n    const key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');\n    slides.filter((_, slideIndex) => {\n      if (!params.cssMode) return true;\n\n      if (slideIndex === slides.length - 1) {\n        return false;\n      }\n\n      return true;\n    }).css({\n      [key]: `${spaceBetween}px`\n    });\n  }\n\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map(snap => {\n      if (snap < 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n\n  Object.assign(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);\n    setCSSProperty(swiper.wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n    const addToSnapGrid = -swiper.snapGrid[0];\n    const addToSlidesGrid = -swiper.slidesGrid[0];\n    swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);\n    swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);\n  }\n\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n\n  if (!isVirtual && !params.cssMode && (params.effect === 'slide' || params.effect === 'fade')) {\n    const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\n    const hasClassBackfaceClassAdded = swiper.$el.hasClass(backFaceHiddenClass);\n\n    if (slidesLength <= params.maxBackfaceHiddenSlides) {\n      if (!hasClassBackfaceClassAdded) swiper.$el.addClass(backFaceHiddenClass);\n    } else if (hasClassBackfaceClassAdded) {\n      swiper.$el.removeClass(backFaceHiddenClass);\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
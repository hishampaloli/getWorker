/**
 * API V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Book', 'model/Book1'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Book'), require('../model/Book1'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiV1) {
      root.ApiV1 = {};
    }
    root.ApiV1.BooksApi = factory(root.ApiV1.ApiClient, root.ApiV1.Book, root.ApiV1.Book1);
  }
}(this, function(ApiClient, Book, Book1) {
  'use strict';

  /**
   * Books service.
   * @module api/BooksApi
   * @version v1
   */

  /**
   * Constructs a new BooksApi. 
   * @alias module:api/BooksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the apiV1BooksGet operation.
     * @callback module:api/BooksApi~apiV1BooksGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all books
     * @param {module:api/BooksApi~apiV1BooksGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiV1BooksGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/books', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BooksIdDelete operation.
     * @callback module:api/BooksApi~apiV1BooksIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a book
     * @param {Number} id 
     * @param {module:api/BooksApi~apiV1BooksIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiV1BooksIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1BooksIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/books/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BooksIdGet operation.
     * @callback module:api/BooksApi~apiV1BooksIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * fetch a book
     * @param {Number} id 
     * @param {module:api/BooksApi~apiV1BooksIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiV1BooksIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1BooksIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/books/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BooksIdPut operation.
     * @callback module:api/BooksApi~apiV1BooksIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update a book
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/Book1} opts.book 
     * @param {module:api/BooksApi~apiV1BooksIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiV1BooksIdPut = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['book'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1BooksIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/books/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BooksPost operation.
     * @callback module:api/BooksApi~apiV1BooksPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a book
     * @param {Object} opts Optional parameters
     * @param {module:model/Book} opts.book 
     * @param {module:api/BooksApi~apiV1BooksPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiV1BooksPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['book'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/books', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1BooksSearchBookssearchQuerysearchQueryGet operation.
     * @callback module:api/BooksApi~apiV1BooksSearchBookssearchQuerysearchQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * search a book
     * @param {String} searchQuery 
     * @param {module:api/BooksApi~apiV1BooksSearchBookssearchQuerysearchQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiV1BooksSearchBookssearchQuerysearchQueryGet = function(searchQuery, callback) {
      var postBody = null;

      // verify the required parameter 'searchQuery' is set
      if (searchQuery === undefined || searchQuery === null) {
        throw new Error("Missing the required parameter 'searchQuery' when calling apiV1BooksSearchBookssearchQuerysearchQueryGet");
      }


      var pathParams = {
        'search_query': searchQuery
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/books/search_books?search_query={search_query}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
